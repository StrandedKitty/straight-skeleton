(()=>{"use strict";class t{constructor(t,e){this.Edges=null,this.Distances=null,this.Edges=t,this.Distances=e}}class e extends Array{constructor(t=0){super()}Add(t){this.push(t)}Insert(t,e){const s=function(t,e,s){const n=Array.prototype.slice.call(arguments,2);return[].concat(t.slice(0,e),n,t.slice(e))}(this,t,e);this.length=s.length;for(let t=0;t<s.length;t++)this[t]=s[t]}Reverse(){this.reverse()}Clear(){this.length=0}get Count(){return this.length}Any(t){t||(t=t=>!0);for(const e of this)if(t(e))return!0;return!1}RemoveAt(t){this.splice(t,1)}Remove(t){const e=this.filter((e=>e!==t));this.length=e.length;for(let t=0;t<e.length;t++)this[t]=e[t]}AddRange(t){for(const e of t)this.Add(e)}Sort(t){this.sort(t.Compare.bind(t))}}class s{constructor(){this.Set=new Set}Add(t){this.Set.add(t)}Remove(t){this.Set.delete(t)}RemoveWhere(t){for(const e of this.Set.values())t(e)&&this.Set.delete(e)}Contains(t){return this.Set.has(t)}Clear(){this.Set.clear()}*[Symbol.iterator](){for(const t of this.Set.values())yield t}}class n extends Map{ContainsKey(t){return this.has(t)}Add(t,e){return this.set(t,e)}}class i{constructor(t,e){this.X=0,this.Y=0,this.X=t,this.Y=e}Negate(){this.X=-this.X,this.Y=-this.Y}DistanceTo(t){const e=this.X-t.X,s=this.Y-t.Y;return Math.sqrt(e*e+s*s)}Normalized(){const t=1/Math.sqrt(this.X*this.X+this.Y*this.Y);return new i(this.X*t,this.Y*t)}Dot(t){return this.X*t.X+this.Y*t.Y}DistanceSquared(t){const e=this.X-t.X,s=this.Y-t.Y;return e*e+s*s}Add(t){return new i(this.X+t.X,this.Y+t.Y)}Sub(t){return new i(this.X-t.X,this.Y-t.Y)}MultiplyScalar(t){return new i(this.X*t,this.Y*t)}Equals(t){return this.X===t.X&&this.Y===t.Y}NotEquals(t){return!this.Equals(t)}ToString(){return`${this.X}, ${this.Y}`}}i.Empty=new i(Number.MIN_VALUE,Number.MIN_VALUE);class r{constructor(t,s){this._comparer=null,this._heap=null,this._heap=new e(t),this._comparer=s}Clear(){this._heap.Clear()}Add(t){let e=this._heap.Count;for(this._heap.Add(t);0!==e;){const t=Math.floor(e/2);if(this._comparer.Compare(this._heap[e],this._heap[t])>=0)break;const s=this._heap[e];this._heap[e]=this._heap[t],this._heap[t]=s,e=t}}get Count(){return this._heap.Count}get Empty(){return 0===this._heap.Count}Peek(){return this._heap.Any()?this._heap[0]:null}Next(){const t=this._heap[0],e=this._heap.Count-1;this._heap[0]=this._heap[e],this._heap.RemoveAt(e);let s=0;for(;;){let t=2*s;if(t>=e)break;if(t+1<e&&this._comparer.Compare(this._heap[t+1],this._heap[t])<0&&t++,this._comparer.Compare(this._heap[s],this._heap[t])<=0)break;const n=this._heap[s];this._heap[s]=this._heap[t],this._heap[t]=n,s=t}return t}}class o{constructor(){this.List=null,this.Next=null,this.Previous=null}AddNext(t){this.List.AddNext(this,t)}AddPrevious(t){this.List.AddPrevious(this,t)}Remove(){this.List.Remove(this)}}class l{constructor(t=i.Empty,e=i.Empty){this.A=t.Y-e.Y,this.B=e.X-t.X,this.C=t.X*e.Y-e.X*t.Y}SetFromCoefficients(t,e,s){return this.A=t,this.B=e,this.C=s,this}Collide(t){return l.Collide(this,t)}static Collide(t,e){return l.CollideCoeff(t.A,t.B,t.C,e.A,e.B,e.C)}static CollideCoeff(t,e,s,n,r,o){const l=t*r-n*e,c=e*o-r*s,u=s*n-o*t;return 0===l?i.Empty:new i(c/l,u/l)}Contains(t){return Math.abs(t.X*this.A+t.Y*this.B+this.C)<Number.EPSILON}}class c extends o{constructor(t,e){super(),this.BisectorNext=null,this.BisectorPrevious=null,this.Begin=t,this.End=e,this.LineLinear2d=new l(t,e),this.Norm=e.Sub(t).Normalized()}ToString(){return`Edge [p1=${this.Begin}, p2=${this.End}]`}}class u extends o{constructor(t,e,s,n,i){super(),this.RoundDigitCount=5,this.Point=null,this.Bisector=null,this.NextEdge=null,this.PreviousEdge=null,this.LeftFace=null,this.RightFace=null,this.Point=t,this.Distance=+e.toFixed(this.RoundDigitCount),this.Bisector=s,this.PreviousEdge=n,this.NextEdge=i,this.IsProcessed=!1}ToString(){return"Vertex [v="+this.Point+", IsProcessed="+this.IsProcessed+", Bisector="+this.Bisector+", PreviousEdge="+this.PreviousEdge+", NextEdge="+this.NextEdge}}class a{constructor(){this._first=null,this._size=0}AddNext(t,e){if(null!==e.List)throw new Error("Node is already assigned to different list!");e.List=this,e.Previous=t,e.Next=t.Next,t.Next.Previous=e,t.Next=e,this._size++}AddPrevious(t,e){if(null!==e.List)throw new Error("Node is already assigned to different list!");e.List=this,e.Previous=t.Previous,e.Next=t,t.Previous.Next=e,t.Previous=e,this._size++}AddLast(t){if(null!==t.List)throw new Error("Node is already assigned to different list!");null===this._first?(this._first=t,t.List=this,t.Next=t,t.Previous=t,this._size++):this.AddPrevious(this._first,t)}Remove(t){if(t.List!==this)throw new Error("Node is not assigned to this list!");if(this._size<=0)throw new Error("List is empty can't remove!");t.List=null,1===this._size?this._first=null:(this._first===t&&(this._first=this._first.Next),t.Previous.Next=t.Next,t.Next.Previous=t.Previous),t.Previous=null,t.Next=null,this._size--}get Size(){return this._size}First(){return this._first}*Iterate(){let t=this._first,e=0;for(;null!==t;){if(yield t,++e===this.Size)return;t=t.Next}}}class h extends class{constructor(){this.Size=0,this.First=null}AddPush(t,e){if(null!==e.List)throw new Error("Node is already assigned to different list!");if(null!==t.Next&&null!==t.Previous)throw new Error("Can't push new node. Node is inside a Quere. New node can by added only at the end of queue.");e.List=this,this.Size++,null===t.Next?(e.Previous=t,e.Next=null,t.Next=e):(e.Previous=null,e.Next=t,t.Previous=e)}AddFirst(t){if(null!==t.List)throw new Error("Node is already assigned to different list!");if(null!==this.First)throw new Error("First element already exist!");this.First=t,t.List=this,t.Next=null,t.Previous=null,this.Size++}Pop(t){if(t.List!==this)throw new Error("Node is not assigned to this list!");if(this.Size<=0)throw new Error("List is empty can't remove!");if(!t.IsEnd)throw new Error("Can pop only from end of queue!");t.List=null;let e=null;if(1===this.Size)this.First=null;else{if(this.First===t)if(null!==t.Next)this.First=t.Next;else{if(null===t.Previous)throw new Error("Ups ?");this.First=t.Previous}null!==t.Next?(t.Next.Previous=null,e=t.Next):null!==t.Previous&&(t.Previous.Next=null,e=t.Previous)}return t.Previous=null,t.Next=null,this.Size--,e}*Iterate(){let t=null!==this.First?this.First.FindEnd():null,e=0;for(;null!==t;){if(yield t,++e===this.Size)return;t=t.Next}}}{constructor(){super(...arguments),this.Edge=null,this.Closed=!1}get IsUnconnected(){return null===this.Edge}AddPush(t,e){if(this.Closed)throw new Error("Can't add node to closed FaceQueue");super.AddPush(t,e)}Close(){this.Closed=!0}}class d{static ConnectQueues(t,e){if(null===t.List)throw new Error("firstFace.list cannot be null.");if(null===e.List)throw new Error("secondFace.list cannot be null.");if(t.List!==e.List){if(!t.IsQueueUnconnected&&!e.IsQueueUnconnected)throw new Error("can't connect two diffrent queues if each of them is connected to edge");if(t.IsQueueUnconnected){const s=t.FaceQueue;this.MoveNodes(e,t),s.Close()}else{const s=e.FaceQueue;this.MoveNodes(t,e),s.Close()}}else{if(!t.IsEnd||!e.IsEnd)throw new Error("try to connect the same list not on end nodes");if(t.IsQueueUnconnected||e.IsQueueUnconnected)throw new Error("can't close node queue not conected with edges");t.QueueClose()}}static MoveNodes(t,e){t.AddQueue(e)}}class f{static IsSameLav(t,e){return null!==t.List&&null!==e.List&&t.List===e.List}static RemoveFromLav(t){null!==t&&null!==t.List&&t.Remove()}static CutLavPart(t,s){const n=new e,i=t.List.Size;let r=t;for(let t=0;t<i;t++){const t=r;if(r=t.Next,t.Remove(),n.Add(t),t===s)return n}throw new Error("End vertex can't be found in start vertex lav")}static MergeBeforeBaseVertex(t,e){const s=e.List.Size;for(let n=0;n<s;n++){const s=e.Next;s.Remove(),t.AddPrevious(s)}}static MoveAllVertexToLavEnd(t,e){const s=t.List.Size;for(let n=0;n<s;n++){const s=t;t=t.Next,s.Remove(),e.AddLast(s)}}}class E{constructor(t,e){this.Intersect=null,this.IntersectEnd=null,t||(t=i.Empty),e||(e=i.Empty),this.Intersect=t,this.IntersectEnd=e}}class p{static FromTo(t,e){return new i(e.X-t.X,e.Y-t.Y)}static OrthogonalLeft(t){return new i(-t.Y,t.X)}static OrthogonalRight(t){return new i(t.Y,-t.X)}static OrthogonalProjection(t,e){const s=new i(t.X,t.Y).Normalized(),n=e.X,r=e.Y,o=s.X,l=s.Y;return new i(n*o*o+r*o*l,n*o*l+r*l*l)}static BisectorNormalized(t,e){const s=p.OrthogonalLeft(t),n=p.OrthogonalLeft(e);if(t.Dot(e)>0)return s.Add(n);let r=new i(t.X,t.Y);return r.Negate(),r=r.Add(e),s.Dot(e)<0&&r.Negate(),r}static IsPointOnRay(t,e,s){const n=new i(e.U.X,e.U.Y).Normalized(),r=t.Sub(e.A);let o=n.Dot(r);if(o<s)return!1;const l=n.X;return n.X=n.Y,n.Y=-l,o=n.Dot(r),-s<o&&o<s}static IntersectRays2D(t,e){const s=t.A,n=t.A.Add(t.U),r=e.A,o=t.U,l=e.U,c=s.Sub(r),u=p.Perp(o,l);if(Math.abs(u)<p.SmallNum){if(0!==p.Perp(o,c)||0!==p.Perp(l,c))return p.Empty;const t=p.Dot(o,o),e=p.Dot(l,l);if(0===t&&0===e)return s.NotEquals(r)?p.Empty:new E(s);if(0===t)return p.InCollinearRay(s,r,l)?new E(s):p.Empty;if(0===e)return p.InCollinearRay(r,s,o)?new E(r):p.Empty;let u,h;var a=n.Sub(r);if(0!==l.X?(u=c.X/l.X,h=a.X/l.X):(u=c.Y/l.Y,h=a.Y/l.Y),u>h){const t=u;u=h,h=t}if(h<0)return p.Empty;if(u=u<0?0:u,u===h){let t=new i(l.X,l.Y);return t=t.MultiplyScalar(u),t=t.Add(r),new E(t)}let d=new i(l.X,l.Y);d=d.MultiplyScalar(u),d=d.Add(r);let f=new i(l.X,l.Y);return f=f.MultiplyScalar(h),f=f.Add(r),new E(d,f)}const h=p.Perp(l,c)/u;if(h<0)return p.Empty;if(p.Perp(o,c)/u<0)return p.Empty;let d=new i(o.X,o.Y);return d=d.MultiplyScalar(h),d=d.Add(s),new E(d)}static InCollinearRay(t,e,s){const n=t.Sub(e);return!(s.Dot(n)<0)}static Dot(t,e){return t.Dot(e)}static Perp(t,e){return t.X*e.Y-t.Y*e.X}static IsClockwisePolygon(t){return p.Area(t)<0}static Area(t){const e=t.Count;let s=0;for(let n=e-1,i=0;i<e;n=i++)s+=t[n].X*t[i].Y-t[i].X*t[n].Y;return.5*s}static MakeCounterClockwise(t){return p.IsClockwisePolygon(t)&&t.Reverse(),t}static IsPointInsidePolygon(t,e){const s=e.Count;if(s<3)return!1;let n=0;const i=e[n];let r=!1;for(let o=0;o<s;o++){const l=e[n];n++;const c=o===s-1?i:e[n],u=t.X,a=t.Y;(l.Y<a&&c.Y>=a||c.Y<a&&l.Y>=a)&&l.X+(a-l.Y)/(c.Y-l.Y)*(c.X-l.X)<u&&(r=!r)}return r}}p.SmallNum=1e-8,p.Empty=new E;class g{constructor(t,e){this.A=null,this.U=null,this.A=t,this.U=e}CreateLinearForm(){const t=this.A.X,e=this.A.Y,s=-this.U.X,n=this.U.Y,i=-(n*t+s*e);return(new l).SetFromCoefficients(n,s,i)}static Collide(t,e,s){const n=l.Collide(t.CreateLinearForm(),e);if(n.Equals(i.Empty))return i.Empty;const r=n.Sub(t.A);return t.U.Dot(r)<s?i.Empty:n}IsOnLeftSite(t,e){const s=t.Sub(this.A);return p.OrthogonalRight(this.U).Dot(s)<e}IsOnRightSite(t,e){const s=t.Sub(this.A);return p.OrthogonalRight(this.U).Dot(s)>-e}}g.Empty=new g(i.Empty,i.Empty);class v extends class{constructor(){this.List=null,this.Next=null,this.Previous=null}get IsEnd(){return null===this.Next||null===this.Previous}AddPush(t){this.List.AddPush(this,t)}AddQueue(t){if(this.List===t.List)return null;let e=this,s=t;for(;null!==s;){const t=s.Pop();e.AddPush(s),e=s,s=t}return e}FindEnd(){if(this.IsEnd)return this;let t=this;for(;null!==t.Previous;)t=t.Previous;return t}Pop(){return this.List.Pop(this)}}{constructor(t){super(),this.Vertex=null,this.Vertex=t}get FaceQueue(){return this.List}get IsQueueUnconnected(){return this.FaceQueue.IsUnconnected}QueueClose(){this.FaceQueue.Close()}}class C{constructor(t,e){this.V=null,this.V=t,this.Distance=e}ToString(){return"IntersectEntry [V="+this.V+", Distance="+this.Distance+"]"}GetType(){return this.constructor.name}}class P extends C{constructor(t,e,s){super(t,e),this.Chain=s}get IsObsolete(){return!1}}class w extends C{constructor(t,e,s,n){super(t,e),this.PreviousVertex=s,this.NextVertex=n}get IsObsolete(){return this.PreviousVertex.IsProcessed||this.NextVertex.IsProcessed}ToString(){return"EdgeEvent [V="+this.V+", PreviousVertex="+(null!==this.PreviousVertex?this.PreviousVertex.Point.ToString():"null")+", NextVertex="+(null!==this.NextVertex?this.NextVertex.Point.ToString():"null")+", Distance="+this.Distance+"]"}}class x extends C{constructor(t,e,s){super(t,e),this.Chain=s}get IsObsolete(){return!1}}class m extends C{constructor(t,e,s){super(t,e),this.Chains=s}get IsObsolete(){return!1}}var A;!function(t){t[t.Edge=0]="Edge",t[t.ClosedEdge=1]="ClosedEdge",t[t.Split=2]="Split"}(A||(A={}));const N=A;class L{constructor(t,e){this._oppositeEdge=t,this._nextVertex=e,this._previousVertex=e.Previous}get PreviousEdge(){return this._oppositeEdge}get NextEdge(){return this._oppositeEdge}get PreviousVertex(){return this._previousVertex}get NextVertex(){return this._nextVertex}get CurrentVertex(){return null}get ChainType(){return N.Split}}class S extends C{constructor(t,e,s,n){super(t,e),this.OppositeEdge=null,this.Parent=null,this.Parent=s,this.OppositeEdge=n}get IsObsolete(){return this.Parent.IsProcessed}ToString(){return"SplitEvent [V="+this.V+", Parent="+(null!==this.Parent?this.Parent.Point.ToString():"null")+", Distance="+this.Distance+"]"}}class y extends S{constructor(t,e,s){super(t,e,s,null)}ToString(){return"VertexSplitEvent [V="+this.V+", Parent="+(null!==this.Parent?this.Parent.Point.ToString():"null")+", Distance="+this.Distance+"]"}}class I{constructor(t){this._splitEvent=t}get OppositeEdge(){return this._splitEvent instanceof y?null:this._splitEvent.OppositeEdge}get PreviousEdge(){return this._splitEvent.Parent.PreviousEdge}get NextEdge(){return this._splitEvent.Parent.NextEdge}get PreviousVertex(){return this._splitEvent.Parent.Previous}get NextVertex(){return this._splitEvent.Parent.Next}get CurrentVertex(){return this._splitEvent.Parent}get ChainType(){return N.Split}}class F{constructor(t){this.EdgeList=t,this._closed=this.PreviousVertex===this.NextVertex}get PreviousEdge(){return this.EdgeList[0].PreviousVertex.PreviousEdge}get NextEdge(){return this.EdgeList[this.EdgeList.Count-1].NextVertex.NextEdge}get PreviousVertex(){return this.EdgeList[0].PreviousVertex}get NextVertex(){return this.EdgeList[this.EdgeList.Count-1].NextVertex}get CurrentVertex(){return null}get ChainType(){return this._closed?N.ClosedEdge:N.Edge}}class V{constructor(t,e){this.Edge=t,this.Polygon=e}}class _{static BuildFromGeoJSON(s){const i=new e,r=new n;for(const t of s)if(t.length>0){const s=this.ListFromCoordinatesArray(t[0]),n=new e;for(let e=1;e<t.length;e++)n.Add(this.ListFromCoordinatesArray(t[e]));const o=this.Build(s,n);for(const t of o.Edges)i.Add(t);for(const[t,e]of o.Distances.entries())r.Add(t,e)}return new t(i,r)}static ListFromCoordinatesArray(t){const s=new e;for(const[e,n]of t)s.Add(new i(e,n));return s}static Build(t,n=null){t=this.InitPolygon(t),n=this.MakeClockwise(n);const i=new r(3,new b),o=new s,l=new e,c=new e;if(this.InitSlav(t,o,c,l),null!==n)for(const t of n)this.InitSlav(t,o,c,l);this.InitEvents(o,i,c);let u=0;for(;!i.Empty;){u=this.AssertMaxNumberOfInteraction(u);const t=i.Peek().Distance;for(const t of this.LoadAndGroupLevelEvents(i))if(!t.IsObsolete){if(t instanceof w)throw new Error("All edge@events should be converted to MultiEdgeEvents for given level");if(t instanceof S)throw new Error("All split events should be converted to MultiSplitEvents for given level");if(t instanceof m)this.MultiSplitEvent(t,o,i,c);else if(t instanceof x)this.PickEvent(t);else{if(!(t instanceof P))throw new Error("Unknown event type: "+t.GetType());this.MultiEdgeEvent(t,i,c)}}this.ProcessTwoNodeLavs(o),this.RemoveEventsUnderHeight(i,t),this.RemoveEmptyLav(o)}return this.AddFacesToOutput(l)}static InitPolygon(t){if(null===t)throw new Error("polygon can't be null");if(t[0].Equals(t[t.Count-1]))throw new Error("polygon can't start and end with the same point");return this.MakeCounterClockwise(t)}static ProcessTwoNodeLavs(t){for(const e of t)if(2===e.Size){const t=e.First(),s=t.Next;d.ConnectQueues(t.LeftFace,s.RightFace),d.ConnectQueues(t.RightFace,s.LeftFace),t.IsProcessed=!0,s.IsProcessed=!0,f.RemoveFromLav(t),f.RemoveFromLav(s)}}static RemoveEmptyLav(t){t.RemoveWhere((t=>0===t.Size))}static MultiEdgeEvent(t,e,s){const n=t.V,i=t.Chain.EdgeList,r=t.Chain.PreviousVertex;r.IsProcessed=!0;const o=t.Chain.NextVertex;o.IsProcessed=!0;const l=this.CalcBisector(n,r.PreviousEdge,o.NextEdge),c=new u(n,t.Distance,l,r.PreviousEdge,o.NextEdge);this.AddFaceLeft(c,r),this.AddFaceRight(c,o),r.AddPrevious(c),this.AddMultiBackFaces(i,c),this.ComputeEvents(c,e,s)}static AddMultiBackFaces(t,e){for(const s of t){const t=s.PreviousVertex;t.IsProcessed=!0,f.RemoveFromLav(t);const n=s.NextVertex;n.IsProcessed=!0,f.RemoveFromLav(n),this.AddFaceBack(e,t,n)}}static PickEvent(t){const e=t.V,s=t.Chain.EdgeList,n=new u(e,t.Distance,g.Empty,null,null);n.IsProcessed=!0,this.AddMultiBackFaces(s,n)}static MultiSplitEvent(t,e,s,n){const i=t.Chains,r=t.V;this.CreateOppositeEdgeChains(e,i,r),i.Sort(new D(r));let o=null,l=i.Count;for(let c=0;c<l;c++){const u=i[c],h=i[(c+1)%l],d=this.CreateMultiSplitVertex(u.NextEdge,h.PreviousEdge,r,t.Distance),E=u.NextVertex,p=h.PreviousVertex;if(this.CorrectBisectorDirection(d.Bisector,E,p,u.NextEdge,h.PreviousEdge),f.IsSameLav(E,p)){const t=f.CutLavPart(E,p),s=new a;e.Add(s),s.AddLast(d);for(const e of t)s.AddLast(e)}else f.MergeBeforeBaseVertex(E,p),p.AddNext(d);this.ComputeEvents(d,s,n),o=this.AddSplitFaces(o,u,h,d)}l=i.Count;for(let t=0;t<l;t++){const e=i[t],s=i[(t+1)%l];f.RemoveFromLav(e.CurrentVertex),f.RemoveFromLav(s.CurrentVertex),null!==e.CurrentVertex&&(e.CurrentVertex.IsProcessed=!0),null!==s.CurrentVertex&&(s.CurrentVertex.IsProcessed=!0)}}static CorrectBisectorDirection(t,e,s,n,i){const r=e.PreviousEdge,o=s.NextEdge;if(n!==r||i!==o)throw new Error;if(n.Norm.Dot(i.Norm)<-.97){const n=p.FromTo(s.Point,t.A).Normalized(),i=p.FromTo(t.A,e.Point).Normalized(),r=this.CalcVectorBisector(n,i);t.U.Dot(r)<0&&t.U.Negate()}}static AddSplitFaces(t,e,s,n){if(e instanceof L)if(null===t){const e=this.CreateOppositeEdgeVertex(n);n.RightFace=e.RightFace,t=e.LeftFace}else{if(null!==n.RightFace)throw new Error("newVertex.RightFace should be null");n.RightFace=t,t=null}else{const t=e.CurrentVertex;this.AddFaceRight(n,t)}if(s instanceof L)if(null===t){const e=this.CreateOppositeEdgeVertex(n);n.LeftFace=e.LeftFace,t=e.LeftFace}else{if(null!==n.LeftFace)throw new Error("newVertex.LeftFace should be null.");n.LeftFace=t,t=null}else{const t=s.CurrentVertex;this.AddFaceLeft(n,t)}return t}static CreateOppositeEdgeVertex(t){const e=new u(t.Point,t.Distance,t.Bisector,t.PreviousEdge,t.NextEdge),s=new v(e);return e.LeftFace=s,e.RightFace=s,(new h).AddFirst(s),e}static CreateOppositeEdgeChains(t,n,i){const r=new s,o=new e,l=new e;for(const e of n)if(e instanceof I){const s=e.OppositeEdge;if(null!==s&&!r.Contains(s)){const n=this.FindOppositeEdgeLav(t,s,i);null!==n?o.Add(new L(s,n)):(this.FindOppositeEdgeLav(t,s,i),l.Add(e)),r.Add(s)}}for(let t of l)n.Remove(t);n.AddRange(o)}static CreateMultiSplitVertex(t,e,s,n){const i=this.CalcBisector(s,e,t);return new u(s,n,i,e,t)}static CreateChains(t){const n=new e,i=new e,r=new s;for(const e of t)if(e instanceof w)n.Add(e);else if(e instanceof y);else if(e instanceof S){const t=e;r.Add(t.Parent),i.Add(t)}for(let e of t)if(e instanceof y){const t=e;r.Contains(t.Parent)||(r.Add(t.Parent),i.Add(t))}const o=new e;for(;n.Count>0;)o.Add(new F(this.CreateEdgeChain(n)));const l=new e(o.Count);for(const t of o)l.Add(t);t:for(;i.Any();){const t=i[0];i.RemoveAt(0);for(const e of o)if(this.IsInEdgeChain(t,e))continue t;l.Add(new I(t))}return l}static IsInEdgeChain(t,e){const s=t.Parent;return e.EdgeList.Any((t=>t.PreviousVertex===s||t.NextVertex===s))}static CreateEdgeChain(t){const s=new e;s.Add(t[0]),t.RemoveAt(0);t:for(;;){const e=s[0].PreviousVertex,n=s[s.Count-1].NextVertex;for(let i=0;i<t.Count;i++){const r=t[i];if(r.PreviousVertex===n){t.RemoveAt(i),s.Add(r);continue t}if(r.NextVertex===e){t.RemoveAt(i),s.Insert(0,r);continue t}}break}return s}static RemoveEventsUnderHeight(t,e){for(;!(t.Empty||t.Peek().Distance>e+this.SplitEpsilon);)t.Next()}static LoadAndGroupLevelEvents(t){const e=this.LoadLevelEvents(t);return this.GroupLevelEvents(e)}static GroupLevelEvents(t){const n=new e,i=new s;for(;t.Count>0;){i.Clear();const s=t[0];t.RemoveAt(0);const r=s.V,o=s.Distance;this.AddEventToGroup(i,s);const l=new e;l.Add(s);for(let e=0;e<t.Count;e++){const s=t[e];if(this.IsEventInGroup(i,s)){const n=t[e];t.RemoveAt(e),l.Add(n),this.AddEventToGroup(i,s),e--}else if(r.DistanceTo(s.V)<this.SplitEpsilon){const n=t[e];t.RemoveAt(e),l.Add(n),this.AddEventToGroup(i,s),e--}}n.Add(this.CreateLevelEvent(r,o,l))}return n}static IsEventInGroup(t,e){return e instanceof S?t.Contains(e.Parent):e instanceof w&&(t.Contains(e.PreviousVertex)||t.Contains(e.NextVertex))}static AddEventToGroup(t,e){e instanceof S?t.Add(e.Parent):e instanceof w&&(t.Add(e.PreviousVertex),t.Add(e.NextVertex))}static CreateLevelEvent(t,e,s){const n=this.CreateChains(s);if(1===n.Count){const s=n[0];if(s.ChainType===N.ClosedEdge)return new x(t,e,s);if(s.ChainType===N.Edge)return new P(t,e,s);if(s.ChainType===N.Split)return new m(t,e,n)}if(n.Any((t=>t.ChainType===N.ClosedEdge)))throw new Error("Found closed chain of events for single point, but found more then one chain");return new m(t,e,n)}static LoadLevelEvents(t){const s=new e;let n;do{n=t.Empty?null:t.Next()}while(null!==n&&n.IsObsolete);if(null===n||n.IsObsolete)return s;const i=n.Distance;let r;for(s.Add(n);null!==(r=t.Peek())&&Math.abs(r.Distance-i)<this.SplitEpsilon;){const e=t.Next();e.IsObsolete||s.Add(e)}return s}static AssertMaxNumberOfInteraction(t){if(++t>1e4)throw new Error("Too many interaction: bug?");return t}static MakeClockwise(t){if(null===t)return null;const s=new e(t.Count);for(const e of t)p.IsClockwisePolygon(e)||e.Reverse(),s.Add(e);return s}static MakeCounterClockwise(t){return p.MakeCounterClockwise(t)}static InitSlav(t,e,s,n){const i=new a,r=t.Count;for(let e=0;e<r;e++){const s=(e+1)%r;i.AddLast(new c(t[e],t[s]))}for(const t of i.Iterate()){const e=t.Next,n=this.CalcBisector(t.End,t,e);t.BisectorNext=n,e.BisectorPrevious=n,s.Add(t)}const o=new a;e.Add(o);for(const t of i.Iterate()){const e=t.Next,s=new u(t.End,0,t.BisectorNext,t,e);o.AddLast(s)}for(const t of o.Iterate()){const e=t.Next,s=new v(t),i=new h;i.Edge=t.NextEdge,i.AddFirst(s),n.Add(i),t.RightFace=s;const r=new v(e);s.AddPush(r),e.LeftFace=r}}static AddFacesToOutput(s){const i=new e,r=new n;for(const t of s)if(t.Size>0){const s=new e;for(const e of t.Iterate()){const t=e.Vertex.Point;s.Add(t),r.ContainsKey(t)||r.Add(t,e.Vertex.Distance)}i.Add(new V(t.Edge,s))}return new t(i,r)}static InitEvents(t,e,s){for(const n of t)for(const t of n.Iterate())this.ComputeSplitEvents(t,s,e,-1);for(const s of t)for(const t of s.Iterate()){const s=t.Next;this.ComputeEdgeEvents(t,s,e)}}static ComputeSplitEvents(t,e,s,n){const r=t.Point,o=this.CalcOppositeEdges(t,e);for(const e of o){const o=e.Point;Math.abs(n- -1)>this.SplitEpsilon&&r.DistanceSquared(o)>n+this.SplitEpsilon||(e.OppositePoint.NotEquals(i.Empty)?s.Add(new y(o,e.Distance,t)):s.Add(new S(o,e.Distance,t,e.OppositeEdge)))}}static ComputeEvents(t,e,s){const n=this.ComputeCloserEdgeEvent(t,e);this.ComputeSplitEvents(t,s,e,n)}static ComputeCloserEdgeEvent(t,e){const s=t.Next,n=t.Previous,r=t.Point,o=this.ComputeIntersectionBisectors(t,s),l=this.ComputeIntersectionBisectors(n,t);if(o.Equals(i.Empty)&&l.Equals(i.Empty))return-1;let c=Number.MAX_VALUE,u=Number.MAX_VALUE;return o.NotEquals(i.Empty)&&(c=r.DistanceSquared(o)),l.NotEquals(i.Empty)&&(u=r.DistanceSquared(l)),Math.abs(c-this.SplitEpsilon)<u&&e.Add(this.CreateEdgeEvent(o,t,s)),Math.abs(u-this.SplitEpsilon)<c&&e.Add(this.CreateEdgeEvent(l,n,t)),c<u?c:u}static CreateEdgeEvent(t,e,s){return new w(t,this.CalcDistance(t,e.NextEdge),e,s)}static ComputeEdgeEvents(t,e,s){const n=this.ComputeIntersectionBisectors(t,e);n.NotEquals(i.Empty)&&s.Add(this.CreateEdgeEvent(n,t,e))}static CalcOppositeEdges(t,s){const n=new e;for(const e of s){const s=e.LineLinear2d;if(this.EdgeBehindBisector(t.Bisector,s))continue;const i=this.CalcCandidatePointForSplit(t,e);null!==i&&n.Add(i)}return n.Sort(new B),n}static EdgeBehindBisector(t,e){return g.Collide(t,e,this.SplitEpsilon).Equals(i.Empty)}static CalcCandidatePointForSplit(t,e){const s=this.ChoseLessParallelVertexEdge(t,e);if(null===s)return null;const n=s.Norm,r=this.CalcVectorBisector(n,e.Norm),o=s.LineLinear2d.Collide(e.LineLinear2d);if(o.Equals(i.Empty))throw new Error("Ups this should not happen");const l=new g(o,r).CreateLinearForm(),c=g.Collide(t.Bisector,l,this.SplitEpsilon);if(c.Equals(i.Empty))return null;if(e.BisectorPrevious.IsOnRightSite(c,this.SplitEpsilon)&&e.BisectorNext.IsOnLeftSite(c,this.SplitEpsilon)){const t=this.CalcDistance(c,e);return e.BisectorPrevious.IsOnLeftSite(c,this.SplitEpsilon)||e.BisectorNext.IsOnRightSite(c,this.SplitEpsilon)?new R(c,t,null,e.Begin):new R(c,t,e,i.Empty)}return null}static ChoseLessParallelVertexEdge(t,e){const s=t.PreviousEdge,n=t.NextEdge;let i=s;const r=Math.abs(e.Norm.Dot(s.Norm)),o=Math.abs(e.Norm.Dot(n.Norm));return r+o>=2-this.SplitEpsilon?null:(r>o&&(i=n),i)}static ComputeIntersectionBisectors(t,e){const s=t.Bisector,n=e.Bisector,r=p.IntersectRays2D(s,n).Intersect;return t.Point.Equals(r)||e.Point.Equals(r)?i.Empty:r}static FindOppositeEdgeLav(t,e,s){const n=this.FindEdgeLavs(t,e,null);return this.ChooseOppositeEdgeLav(n,e,s)}static ChooseOppositeEdgeLav(t,s,n){if(!t.Any())return null;if(1===t.Count)return t[0];const i=s.Begin,r=s.Norm,o=n.Sub(i),l=r.Dot(o);for(const e of t){const t=e.Previous.Point.Sub(i),s=e.Point.Sub(i),n=r.Dot(t),o=r.Dot(s);if(n<l&&l<o||n>l&&l>o)return e}for(const s of t){const t=s.List.Size,i=new e(t);let r=s;for(let e=0;e<t;e++)i.Add(r.Point),r=r.Next;if(p.IsPointInsidePolygon(n,i))return s}throw new Error("Could not find lav for opposite edge, it could be correct but need some test data to check.")}static FindEdgeLavs(t,s,n){const i=new e;for(const e of t){if(e===n)continue;const t=this.GetEdgeInLav(e,s);null!==t&&i.Add(t)}return i}static GetEdgeInLav(t,e){for(const s of t.Iterate())if(e===s.PreviousEdge||e===s.Previous.Next)return s;return null}static AddFaceBack(t,e,s){const n=new v(t);e.RightFace.AddPush(n),d.ConnectQueues(n,s.LeftFace)}static AddFaceRight(t,e){const s=new v(t);e.RightFace.AddPush(s),t.RightFace=s}static AddFaceLeft(t,e){const s=new v(t);e.LeftFace.AddPush(s),t.LeftFace=s}static CalcDistance(t,e){const s=e.End.Sub(e.Begin),n=t.Sub(e.Begin),i=p.OrthogonalProjection(s,n);return n.DistanceTo(i)}static CalcBisector(t,e,s){const n=e.Norm,i=s.Norm,r=this.CalcVectorBisector(n,i);return new g(t,r)}static CalcVectorBisector(t,e){return p.BisectorNormalized(t,e)}}_.SplitEpsilon=1e-10;class b{Compare(t,e){return t.Distance>e.Distance?1:t.Distance<e.Distance?-1:0}}class D{constructor(t){this._center=t}Compare(t,e){return t===e?0:D.Angle(this._center,t.PreviousEdge.Begin)>D.Angle(this._center,e.PreviousEdge.Begin)?1:-1}static Angle(t,e){const s=e.X-t.X,n=e.Y-t.Y;return Math.atan2(n,s)}}class B{Compare(t,e){return t.Distance>e.Distance?1:t.Distance<e.Distance?-1:0}}class R{constructor(t,e,s,n){this.OppositeEdge=null,this.OppositePoint=null,this.Point=null,this.Point=t,this.Distance=e,this.OppositeEdge=s,this.OppositePoint=n}}const Y=document.getElementById("canvas"),X=Y.getContext("2d");Y.width=800,Y.height=800;const O=[[143,225],[249,220],[247,101],[364,100],[357,219],[670,219],[668,618],[426,615],[431,407],[140,413]],M=[[]];let T=0,k=!1;X.translate(.5,.5);const z=(t,e,s)=>{X.beginPath(),X.arc(t,e,s,0,2*Math.PI,!1),X.fill()},U=t=>{X.globalAlpha=.3,X.beginPath(),X.fillStyle="#d0d",X.moveTo(t.Polygon[0].X,t.Polygon[0].Y);for(const e of t.Polygon)X.lineTo(e.X,e.Y);X.closePath(),X.fill(),X.globalAlpha=1,X.beginPath(),X.strokeStyle="#111",X.lineWidth=1,X.moveTo(t.Polygon[0].X,t.Polygon[0].Y);for(const e of t.Polygon)X.lineTo(e.X,e.Y);X.closePath(),X.stroke()},q=()=>{if(X.clearRect(0,0,Y.width,Y.height),O.length>2){let t;try{t=_.BuildFromGeoJSON([[O,...M.filter((t=>t.length>2))]])}catch(t){console.error(t)}if(t)for(const e of t.Edges)U(e)}(()=>{X.fillStyle="#333";for(const t of O)z(t[0]+.5,t[1]+.5,2);for(const t of M)for(const e of t)z(e[0]+.5,e[1]+.5,2)})()};Y.addEventListener("pointerdown",(t=>{const e=t.offsetX*Y.width/Y.clientWidth,s=t.offsetY*Y.height/Y.clientHeight;if(k){const t=M[T];t.length>2&&Math.hypot(t[0][0]-e,t[0][1]-s)<5?(T++,M[T]=[]):M[T].push([e,s])}else O.push([e,s]),console.log(JSON.stringify(O,null,"\t"));q()}));const Q=document.getElementById("button-inner"),G=document.getElementById("button-outer");document.getElementById("button-clear").addEventListener("click",(()=>{O.length=0,M.length=0,M.push([]),T=0,q()})),Q.addEventListener("click",(()=>{k=!0,Q.disabled=!0,G.disabled=!1})),G.addEventListener("click",(()=>{k=!1,Q.disabled=!1,G.disabled=!0})),Q.disabled=!1,G.disabled=!0,q()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,